'''
Author: Yasmine El Shafei
Project: Single Server queue 
Course: System Modeling and Simulation
Used Libraries : 
Numpy -> To count non_zero elements inside a wait time
pandas -> for generating table by column
'''
import random
import numpy as nm 
import pandas as pd


IAT = []
ST = []
IAT_RN = []
ST_RN = []

# Getting number of customers
customers_number = int(input("Enter Customer numbers: "))

# To generate customer number from 1 to N
Customer_Num = []
for i in range(1,customers_number + 1):
    Customer_Num.append(i)

# Reading file with interarrival time
with open('IAT.txt') as f:
    read = f.read()
    for i in read:
        if i.isdigit() == True:
            IAT.append(int(i))

# Reading file with Service time 
with open('ST.txt') as f:
    read = f.read()
    for i in read:
        if i.isdigit() == True:
            ST.append(int(i))

# Generating random values for service Time and IAT

n = customers_number
while  n > 0:
    IAT_RN.append(round(random.uniform(0,1),4))
    ST_RN.append(round(random.uniform(0,1),4))
    n -= 1

# Probability of Service time and their probabilities
Time_bet_arrivals = [0,1,2,3,4,5]
probability_of_arrival = [0.09,0.17,0.27,0.20,0.15,0.12]

Time_bet_st = [1,2,3,4]
probability_of_service = [0.20,0.40,0.28,0.12]


size_prob_AT = len(probability_of_arrival)

# Calculating the CDF of Arrival time
cdf_prob_AT = []

cdf_prob_AT.append(probability_of_arrival[0])

# To carry the cummlative values
num = cdf_prob_AT[0]         

for i in range(1,size_prob_AT):
        num += probability_of_arrival[i] 
        cdf_prob_AT.append(round(num,2))
      

size_prob_ST = len(probability_of_service)

# Calculating The CDF of Service Time
cdf_prob_ST = []
cdf_prob_ST.append(probability_of_service[0])
num = cdf_prob_ST[0]         
for i in range(1,size_prob_ST):
        num += probability_of_service[i] 
        cdf_prob_ST.append(round(num,2))
#print(cdf_prob_ST)

# Getting the values of IAT after comparsion with CDF
IAT_CDF = []

for i in range(0,len(IAT_RN)):
    for j in range(0,len(cdf_prob_AT)):
        if IAT_RN[i] <= cdf_prob_AT[j]:
            IAT_CDF.append(Time_bet_arrivals[j])
            break
        else:
            continue 

# Getting the values of ST after comparsion with CDF
ST_CDF = []

for i in range(0,len(ST_RN)):
    for j in range(0,len(cdf_prob_ST)):
        if ST_RN[i] <= cdf_prob_ST[j]:
            ST_CDF.append(Time_bet_st[j])
            break
        else:
            continue     

IAT_table_data = {
    "Time Between Arrivals (Minutes)" : Time_bet_arrivals,
    "Probability" : probability_of_arrival,
    "CDF" : cdf_prob_AT 
}

IAT_table = pd.DataFrame(IAT_table_data)

ST_table_data = {
    "Service Time (Minutes)" : Time_bet_st,
    "Probability" : probability_of_service,
    "CDF" : cdf_prob_ST 
}

ST_table = pd.DataFrame(ST_table_data)

print("IAT Table Probability and CDF\n---------------------------------------------------------------------------------------------------------------------------\n")

print(IAT_table)

print("\n---------------------------------------------------------------------------------------------------------------------------\n")

print("ST Table Probability and CDF\n---------------------------------------------------------------------------------------------------------------------------\n")

print(ST_table)

print("\n---------------------------------------------------------------------------------------------------------------------------\n")

IAT_CDF_table_data = {
    "Random Value of IAT" : IAT_RN,
    "IAT Generated by CDF" : IAT_CDF 
}


IAT_CDF_table = pd.DataFrame(IAT_CDF_table_data)

print(IAT_CDF_table)

print("IAT RN and Values after comparsion\n---------------------------------------------------------------------------------------------------------------------------\n")


ST_CDF_table_data = {
    "Random Value of Service time" : ST_RN,
    "ST Generated by CDF" : ST_CDF 
}


ST_CDF_table = pd.DataFrame(ST_CDF_table_data)

print(ST_CDF_table)

print("ST RN and their value after Comparsion\n---------------------------------------------------------------------------------------------------------------------------\n")

# First Path Finihed
# Using data we collected from the first path to create the simulation table

size = len(IAT)

arrival_time = []
time_service_begin = [0 for i in range(size)]
wait_time = [0 for i in range(size)]
time_service_end = [0 for i in range(size -1)]
system_time = [0 for i in range(size - 1)]
idle_time = []
queue_length = [0 for i in range(size)]

arrival_time.insert(0,IAT[0])
for i in range(1,size):
   arrival_time.insert(i,IAT[i] + arrival_time[i - 1])

# On first iteration

time_service_end.insert(0,ST[0])

system_time.insert(0,ST[0] + wait_time[0])

idle_time.insert(0,0)

# Building of simulation table
for i in range(1, size):
    
    time_service_begin[i] =  max(arrival_time[i],time_service_end[i-1])
    
    wait_time[i] = time_service_begin[i] - arrival_time[i]
    
    time_service_end[i] = ST[i] + time_service_begin[i]
    
    system_time[i] = ST[i] + wait_time[i]

    if(arrival_time[i] > time_service_end[i - 1]):
        idle_time.append(arrival_time[i] - time_service_end[i - 1])
    else:
        idle_time.insert(i,0)

    for j in range(i,size):
        if(arrival_time[j] < time_service_end[i - 1]):
            queue_length[i] += 1 
      

# To create simulation table

Simulation_table_data = {
                    'Customer': Customer_Num,
                    'Inter_arrival Time': IAT,
                    'Arrival Time': arrival_time,
                    'Service Time': ST,
                    'Time Service Begin' : time_service_begin,
                    'Wait Time': wait_time,
                    'Time Service End': time_service_end,
                    'System Time': system_time,
                    'Idle Time': idle_time,
                    'Queue Length': queue_length
                    }

Simulation_table = pd.DataFrame(Simulation_table_data)

# To print Simulation table
print("Simulation Table\n---------------------------------------------------------------------------------------------------------------------------\n")

print(Simulation_table)

print("\n---------------------------------------------------------------------------------------------------------------------------\n")

# Statitics Calculations

count_wait_people = nm.count_nonzero(wait_time)

Average_waiting_time = sum(wait_time) / customers_number

Average_system_time = sum(system_time) / customers_number

Server_utitization = (time_service_end[size - 1] - sum(idle_time)) / time_service_end[size - 1]

probability_of_idle = sum(idle_time) / time_service_end[size - 1]

probability_of_wait = count_wait_people / customers_number

statisitics_table_data = {
                    'Average waiting time': [Average_waiting_time],
                    'Average system time ': [Average_system_time],
                    'Server utitization': [Server_utitization],
                    'probability of idle' : [probability_of_idle],
                    'probability_of_wait': [probability_of_wait],
                    }
statistics_table = pd.DataFrame(statisitics_table_data)

# To print the statistics table

print("Statistics Table\n---------------------------------------------------------------------------------------------------------------------------\n")

print(statistics_table)                    

print("\n---------------------------------------------------------------------------------------------------------------------------\n")

 
